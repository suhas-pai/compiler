func b(c: *mut volatile u32) {
    @apply @meta.deprecated({ message: "Unsafe function." });

    a.b = 0;
    return 0u32;
}

func ttest(a: some std.vector(u32 or u64)): u32 {
    return 0u32;
}

extern let ptr: pointer;
func b_func(): type {
    let arr: [2; func(a) => a > 0]u32 = [1, ...2]
    let T = u32;

    return func(a: T): T {
        return a;
    }
}

interface Allocator {
    getHandleType: func() -> type = func() {
        return ptr;
    },

    alloc: func() -> ?getHandleType() = func() => null,

    free: func() -> void,
    optFree?: func() -> void
}

shape Sh {
    a: u32 or u64,
    b: func() -> void,
    c?: s8 or s32
    d: u8
};

func funcConstraint(a: Function): bit {
    return a == func() -> u32;
}

interface I {
    doThing: func() -> void = func() {
        std.print(`Hi {"hi"}`);
    },

    doThing2: func(a: u32) -> void = func(a) {
        std.print(`Hi {a:x}`);
    },

    doThing3: funcConstraint
}

func tupleExample(a: u32): tuple(uint32_t, meta.string) {
    // FIXME:
    return (a,);
    return (a, 1)
}

// In structs, fields are mutable by default
struct A {
    a: u32 = 4,
    b: u32 = 5,

    if (T) {
        c: bit = false
    } else {
        d: f64 = 4.0
    }

    for (let mut i = 0; i != 10; i++) {
        #meta.addDeclToSelf(`a{i}`, int);
    }

    impl I {
        doThing() {

        },

        doThing2: default
    }
};

func SGen(T: Struct, a: u32) {
    return struct {
        a: *T,
        b: u32 = ::a
    };
}

// impl I for SGen(T: Struct, a: 2) = func() {}
impl(I, match SGen(T: Struct, a: 2)) {
    if (T == A) {
        doThing: func() {
            std.print("{}", T);
        },

        doThing2: func() {
            if (\Sh.?c) {
                std.print("{}", T);
            }
        }
    }
}

func inf(a...: typeof(b), b: u16 or u32 or u64): typeof(a[0]) {
    std.println("Got {} items", a.length);
    return a[0];
}

struct ErrorStruct {
    number: u32 = 0;
    string_value: *[10]u8;
    array: [11][10]u8 = [0..<11: [...0]];
    array2: [*mut][10]u8;
};

// associated values
enum Error(ErrorStruct, \ErrorStruct.number) {
    FailPartial: {
        number: 4,
        string_value: "Hi"
    },
    FailComplete: {
        number: 14,
    }
};

union(enum) UE {
    FuturePartial: {
        a: mut u16,
        b: u16
    },
    FutureComplete: {
        a: bit
    },
    FutureA: A
}

class C {
    private a: mut A;
    public func init(): result(*mut C, Error) {
        return malloc(sizeof(C));
    }

    // #meta.disable(copy);

    public func deinit(*mut self) {
        self.a = 0;
    }
}

func B(a: i32, b: u32): type {
    let bc = func() { return true; }
    let bd: func() -> bit = func() => true;

    for (let mut i = 0; i != 10; i++) {

    }

    for (let mut i in A) {

    }

    for (let mut i: *mut u32 in A) {

    }

    return struct {
        a: T,
        if 1 + 1 == 2 {
            b: T
        } else {
            c: *mut T
        }
    };
}

enum E {
    a: 4,
    b,
    c: 6 + 4,

    if 1 + 2 == 3 {
        d: 4,
    } else {
        d_e: 5,
    }
};

// constraint = func(T: any) -> bit or func(T: any, index: u64) -> bit

let Ec: constraint = E as constraint;
let strict_type: constraint = Struct or Enum or Union or Wrapper or Pointer;

func D() {
    return @{
        html.div {
            a: 5,
            b: {{ a: { b: 4 }, c.d: 5 }}

            Text {
                if (1 + 1 == 2) {
                    value: "Hello, World"
                } else {
                    value: "Hello, Not"
                }
            }
        }
    }

    return @{
        VStack {
            padding: tw.rem(4),
            color: .blue,

            if (1 + 1 == 2) {
                HStack {
                    Form {
                        Input {
                            placeholder: `Hello, {variable}`
                            bind: stateVariable,
                            label: {
                                text: "Name: "
                            }
                        }
                        Button {
                            kind: .submit
                            text: "Click here"
                        }
                    }
                }
            }

            for (let mut i = 0; i != 10; i++) {
                Button {
                    kind: .formal,
                    padding: .rem(4)
                    text: "Click here",
                    onclick: func<L>[]() => return print(`Hello, {variable}`),
                    ...default
                }
            }

            for (let mut i in 0..<10) {
               Button {
                    kind: .formal,
                    padding: .rem(4)
                    text: "Click here",
                    onclick: func<L>[]() => print(`Hello, {variable}`) as void,
                    ...default
                }
            }
        }
        html.div {
            a: 5
            b: { a: { b: 4 }, c.d: 5 }

            html.p {
                text: `Hello, {variable}`
            }
        }
    };
}

closure C {
    func alloc(I: meta.closure_capture_info) -> ptr {

    }

    func free(P: ptr, I: meta.closure_capture_info) {

    }

    void callHandler() {

    }
}

pointer P {
    layout {

    }

    func nullValue() {
        return 0u32;
    }
}

wrapper(u32) {
    layout {

    }
}

wrapper(f64) {
    layout {

    }

    nan {

    }
}

let listConstraint = func(val, index) => val != 0 and index % 2 == 0;
func infiniteList(a...: listConstraint, b: typeof(a[0])) {
    return a[0] + b;
}

let closure: LambdaFn<(a: u64, b: bit) -> bit>(L) =
    func(a: int, b: bit) => return true

let D: constraint = func(T: type): bit => return true
let C: constraint = bit or u64;

func cons_example(a: D) {
    let fl = 0x1234.0xf64
}

let mut d: int = 3;
func main(argc: s32, argv: []*u8) -> int {
    let mut e = [1,2,3,4,5];
    let mut ea = [...e, 1];
    let mut eb: [10]int = [...ea, ...2];

    let mut [2: state, [a, b]] = useState("");

    eb[0..<5] = ...[...ea, ...eb];
    eb[5..=9] = 2;

    let mut ez = [2: 5, ...eb];
    let volatile f = .c.d;

    let mut volatile g = f();
    let callback: LambdaFn<L>(a: u64) = func<L>[&](a: u64): bit => {
        return true;
    }

    return c;
}
